# GitHub uses <Link>, pagination, Hypermedia, HATEOAS and URI templates as they're cool and fully RESTful
# This just increases the pain of using their API from a command line. Roy Fielding was very clever in defining REST, but not everything REST is pragmatic.
# Pagination is a horrid idea. What kind of server or client can't cope with a few 100 lines? It pushes state management all over the place. And it's usually broken - the ranges change between requests, so items move pages, and so disappear, or appear twice. It takes all of the worst ideas from database result set cursors, and pushes them into the web of 2014.
# A programmatically navigable API seems nice, until you realise that a client doesn't have a foggiest what all those link relations mean.
# Doesn't know what the data schema is for every resource. And lastly, why, is it good to allow 'URLs to change' if Roy Fielding's 'this allows people to do long-term design right' - "too many APIs are short-term", if in such omnipotent forethought one needs new URL structures. It the URL structure is now self-described, why change it? Frankly, every example I've seen is pretty moot. And the efficiency of parsing such designs, without allowing 'just go there' access is appalling, as well as convoluted and complex (and much more work, with a lot more parsing).
# URI templates are a nice idea, but the vagueness of the rules (eg variable names can also be percent encoded, if not, need percent encoding), the "don't output the prefix if all expansions are null" (which requires one to cache the entire output, just in case), the '+' operator (yuck, special encoding rules for literals which all of a sudden aren't quite literal, with a special case for % again requiring look-ahead), yuck and list / map explosion (depending on what the binder decides, not the template) are another mess - by the same crowd. It would have been VERY simple to just say "the rest of the URL is treated as already encoded. Variables should be encoded." HTTP with REST-like APIs won out because of simplicity and sanity. Frankly, the worst examples are the HTTP Accept-* and Content-* headers, which are badly implemented everywhere, not least in the one web server the web big wigs personally hack on - Apache. Frankly, %-encoding itself is another mess (at least 4 contradictory RFCs, special rules for form bodies, and no one even questions why it is necessary in 2014).
# It seems REST has now gained the "enterprise tooling" and "self describing schema stuff" we loathed about WS-DeathStar.

core_usesIn curl
core_usesIn urlencode template
core_usesIn jsonreader
core_usesIn jsonwriter

github_api_v3_initialise()
{
	local tokenFilePath="$1"
	
	if [ $# -eq 2 ]; then
		# eg https://{server}/api/v3
		github_api_v3_endpoint="$2"
	else
		github_api_v3_endpoint='https://api.github.com'
	fi
	
	local githubOAuth2PersonalAccessToken="$(<"$tokenFilePath")"
	github_api_v3_user="${githubOAuth2PersonalAccessToken}:x-oauth-basic"
	
	local TMP_FILE
	if core_variable_isUnset github_api_v3_requestFilePath; then
		core_temporaryFiles_newFileToRemoveOnExit
		github_api_v3_requestFilePath="$TMP_FILE"
	fi

	if core_variable_isUnset github_api_v3_responseFilePath; then
		core_temporaryFiles_newFileToRemoveOnExit
		github_api_v3_responseFilePath="$TMP_FILE"
	fi
}

core_dependency_requires '*' date
github_api_v3_timestampToEpochSeconds()
{
	date -d "$1" '+%s'
}

core_dependency_requires '*' cat
github_api_v3_errorMessageExit()
{
	if [ "$(core_init_verbosity)" -gt 0 ]; then
		cat "$github_api_v3_responseFilePath" 1>&2
	fi
	
	local errorMessage=''
	
	_github_api_v3_errorMessage_event()
	{
		if jsonreader_eventMatches '/message' value string; then
			errorMessage="$eventValue"
		fi
	}
	
	jsonreader_parse "$github_api_v3_responseFilePath" _github_api_v3_errorMessage_event
	
	if [ "$(core_init_verbosity)" -gt 1 ]; then
		cat "$github_api_v3_responseFilePath" 1>&2
	fi
	
	core_exitError $core_commandLine_exitCode_DATAERR "GitHub error ($curl_httpStatusCode) was '$errorMessage'"
}

_github_api_v3_extractHeader_Location()
{
	if [ "$fieldName" = 'LOCATION' ]; then
		github_api_v3_header_Location="$fieldValue"
	fi
}

_github_api_v3_relative()
{
	local verb="$1"
	local relativePath="$2"
	shift 2
	
	if core_variable_isUnset github_api_v3_endpoint; then
		core_exitError $core_commandLine_exitCode_SOFTWARE "Please initialise first using 'github_api_v3_initialise' (to set 'github_api_v3_endpoint')"
	fi
	
	_github_api_v3_absolute "$verb" "${github_api_v3_endpoint}${relativePath}" "$@"
}

_github_api_v3_absolute()
{
	local verb="$1"
	local url="$2"
	shift 2
	
	if core_variable_isUnset github_api_v3_user; then
		core_exitError $core_commandLine_exitCode_SOFTWARE "Please initialise first using 'github_api_v3_initialise' (to set 'github_api_v3_user')"
	fi
	
	# As an alternative to setting user, we can set a header: 'Authorization' "token ${github_api_v3_oauth2Token}"
	set -- "Accept" 'application/vnd.github.v3+json' "$@"
	
	if core_variable_isUnset curl_uploadFile; then
		local curl_uploadFile="$github_api_v3_requestFilePath"
	fi
	
	local curl_httpVersion curl_httpReasonPhrase
	curl_retrieve basic "$github_api_v3_user" "$verb" "$url" "$github_api_v3_responseFilePath" "$@"
	
	case $curl_httpStatusCode in
		
		# Bad Request (we sent an invalid JSON)
		400)
			github_api_v3_errorMessageExit
		;;
		
		# Unprocessable Entity (we sent an invalid field in the body)
		422)
			github_api_v3_errorMessageExit
		;;
		
		# Unauthorized (not always)
		401)
			github_api_v3_errorMessageExit
		;;
		
		# Unauthorized or Rate-Limited
		403)
			github_api_v3_errorMessageExit
		;;
		
	esac
}

_github_api_v3_relative_GET()
{
	local relativePath="$1"
	shift 1
	
	printf '' >"$github_api_v3_requestFilePath"
	_github_api_v3_relative GET "$relativePath" "$@"
}

_github_api_v3_relative_POST()
{
	local relativePath="$1"
	shift 1
	
	_github_api_v3_relative POST "$relativePath" 'Content-Type' 'application/json' "$@"
}

_github_api_v3_relative_PATCH()
{
	local relativePath="$1"
	shift 1
	
	_github_api_v3_relative PATCH "$relativePath" 'Content-Type' 'application/json' "$@"
}

_github_api_v3_relative_PUT()
{
	local relativePath="$1"
	shift 1
	
	_github_api_v3_relative PUT "$relativePath" "$@"
}

_github_api_v3_absolute_PUT()
{
	local absoluteUrl="$1"
	shift 1
	
	_github_api_v3_absolute PUT "$absoluteUrl" "$@"
}

_github_api_v3_absolute_PATCH()
{
	local absoluteUrl="$1"
	shift 1
	
	_github_api_v3_absolute PATCH "$absoluteUrl" 'Content-Type' 'application/json' "$@"
}
